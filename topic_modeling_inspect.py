import json
import pickle
from gensim.models.ldamodel import LdaModel
import numpy as np
import matplotlib.pyplot as plt

# Read in the topic model (really only necessary to know how to map between 
# integers and words: there are other ways we could have done this without
# needing the model, this is just convenient).
with open("topic_model.bin", "rb") as ifd:
    model = pickle.loads(ifd.read())

# Print out the top ten words, with their probabilities, for each topic.
for topic_number, words in model.print_topics():
    print(topic_number, words)

# Read in the counts generated by the previous script that applied the
# topic model to some documents.
with open("topic_model_counts.json", "rt") as ifd:
    groupwise_counts = json.loads(ifd.read())

# Create and fill up a matrix of counts (the rows are topics, the columns are groups).
matrix_of_counts = np.zeros(shape=(model.num_topics, len(groupwise_counts))) 
groups = []
for group_number, (group, topic_counts) in enumerate(sorted(groupwise_counts.items())):
    groups.append(group)
    for topic, count in topic_counts.items():
        topic_number = int(topic)
        matrix_of_counts[topic_number, group_number] = count

# Divide each group's topic-count by the total number of counts for the group
# (i.e. normalize the counts to a distribution).
matrix_of_counts = (matrix_of_counts / matrix_of_counts.sum(0))

# Plot the proportion of each topic's occurrence for each group.
#
# Note: matplotlib can be rather baroque, and there are other
# libraries, like seaborn or plotnine, that build easier-to-use
# abstractions on top of it.
fig, ax = plt.subplots()
ax.stackplot(
    groups, 
    matrix_of_counts,
    labels=[i for i in range(model.num_topics)]
)
ax.legend(loc='upper left', fontsize=20)
ax.set_title('Topic proportions', fontsize=60)
ax.set_xlabel('Groups', fontsize=40)
ax.set_ylabel('Topics', fontsize=40)
ax.set_xticks(range(len(groups)), groups, fontsize=25)
ax.set_yticks([], [])
plt.show()